# When the PR is labeled 'Grant Translated' do the following:
# Add it to the Grant Committee Voting Google Sheet
#
# Ted Cahall May 21, 2022

name: Grant Translated
on:
  pull_request_target:
    types: labeled
  
jobs:
  get_filename:
    runs-on: ubuntu-latest
    outputs:
      filename: ${{ steps.files.outputs.added }}
    steps:
      - name: Get grant application file name
        id: 'files'
        uses: Ana06/get-changed-files@v2.0.0
        with:
          filter: 'applications/*.md'
          
  parse_app:
    needs: get_filename
    if: needs.get_filename.outputs.filename
    runs-on: ubuntu-latest
    outputs:
      app_email: ${{ steps.grep_email.outputs.email_addr }}
      contact_name: ${{ steps.grep_email.outputs.contact_name }}
      project_name: ${{ steps.grep_email.outputs.project_name }}
      team_name: ${{ steps.grep_email.outputs.team_name }}
      total_cost: ${{ steps.grep_email.outputs.total_cost }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Echo_file
        run: echo This is the file ${{ needs.get_filename.outputs.filename }}

      # Parse the application template for the email account
      - name: assign the env from the email name
        id: grep_email
        run: |
          export APP_EMAIL=`/bin/grep "**Contact Email:**" ${{ needs.get_filename.outputs.filename }} | cut -d" " -f4`
          #echo "::set-env name=APP_EMAIL::$APP_EMAIL"
          echo "::set-output name=email_addr::$APP_EMAIL"
          export CNAME=`/bin/grep "**Contact Name:**" ${{ needs.get_filename.outputs.filename }} | cut -d" " -f4-8`
          echo "::set-output name=contact_name::$CNAME"
          export PNAME=`/bin/grep "**Project Name:**" ${{ needs.get_filename.outputs.filename }} | cut -d" " -f4-8`
          echo "::set-output name=project_name::$PNAME"
          export TNAME=`/bin/grep "**Team Name:**" ${{ needs.get_filename.outputs.filename }} | cut -d" " -f4-8`
          echo "::set-output name=team_name::$TNAME"
          export TCOST=`/bin/grep "**Total Costs:**" ${{ needs.get_filename.outputs.filename }} | cut -d" " -f4-8`
          echo "::set-output name=total_cost::$TCOST"
          echo ${{ github.actor }} ${{ github.event_name }} ${{ github.event.pull_request.head.repo.owner.login }}

  checklabel:
    needs: [get_filename, parse_app]
    if: github.event.label.name == 'Grant Translated'
    runs-on: ubuntu-latest
    steps:
      - id: 'update_worksheet'
        uses: jroehl/gsheet.action@v1.2.0
        with:
          #spreadsheetId: 1FsNUKcfAJAorZGHpEzbRKLVYWbpZ_93Ts-R-JTpRK_A #This is the DummyTest sheet
          spreadsheetId: 1RdSK5Y_URnTSzg__fRHV51jwO90x4AUMy0ym0ytWwKA
          commands: |
            [
              { "command": "appendData", "args": { "data": [["${{ github.event.pull_request.head.repo.owner.login }}", "${{needs.parse_app.outputs.app_email}}", "${{needs.parse_app.outputs.project_name}}", "${{needs.parse_app.outputs.total_cost}}"]], "worksheetTitle": "Grants", "minCol": 2 }}
            ]
        env:
          GSHEET_CLIENT_EMAIL: enf-grant-service-account@sonorous-haven-350712.iam.gserviceaccount.com
          GSHEET_PRIVATE_KEY: ${{ secrets.GHSEET_API_KEY }}
      - name: dump results
        env:
          RESULTS: ${{ steps.update_worksheet.outputs.results }}
        run: echo "$RESULTS"

  alwaysrun:
    needs: checklabel
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
    - name: alwaysrunthis
      id: in-case-no-labels-matched
      run: echo "Always step was run to avoid error notice"

